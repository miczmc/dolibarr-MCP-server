#!/usr/bin/env python3
"""
Script de test pour trouver la bonne URL API Dolibarr
"""

import asyncio
import httpx

# Configuration
BASE_DOMAIN = "https://dolibarr.com"
API_KEY = "votre_cle_api_ici"  # Remplacez par votre vraie clé

# URLs candidates à tester
CANDIDATE_URLS = [
    f"{BASE_DOMAIN}/dolibarr/api/index.php",
    f"{BASE_DOMAIN}/dolibarr/api",
    f"{BASE_DOMAIN}/dolibarr/htdocs/api/index.php",
    f"{BASE_DOMAIN}/api/index.php",
    f"{BASE_DOMAIN}/api",
]

async def test_api_url(base_url: str, api_key: str) -> bool:
    """Test une URL API Dolibarr"""
    
    headers = {
        "DOLAPIKEY": api_key,
        "Content-Type": "application/json"
    }
    
    # URLs de test à essayer
    test_endpoints = [
        "",  # URL de base
        "/contacts?limit=1",
        "/thirdparties?limit=1",
        "/users/info"
    ]
    
    async with httpx.AsyncClient() as client:
        for endpoint in test_endpoints:
            test_url = f"{base_url.rstrip('/')}{endpoint}"
            
            try:
                print(f"🔍 Test: {test_url}")
                response = await client.get(test_url, headers=headers, timeout=10)
                
                print(f"   📊 Status: {response.status_code}")
                
                if response.status_code == 200:
                    print(f"   ✅ Succès ! Réponse: {len(response.text)} chars")
                    if endpoint:  # Si on teste un endpoint spécifique
                        try:
                            data = response.json()
                            if isinstance(data, list):
                                print(f"   📋 Données: {len(data)} éléments")
                            else:
                                print(f"   📋 Données: {type(data)}")
                        except:
                            print(f"   📋 Réponse non-JSON")
                    return True
                    
                elif response.status_code == 401:
                    print(f"   🔑 Erreur d'authentification (clé API incorrecte?)")
                    
                elif response.status_code == 404:
                    print(f"   ❌ Endpoint non trouvé")
                    
                else:
                    print(f"   ⚠️  Autre erreur: {response.status_code}")
                    
            except httpx.TimeoutException:
                print(f"   ⏱️  Timeout")
            except Exception as e:
                print(f"   💥 Erreur: {str(e)}")
        
        return False

async def main():
    """Fonction principale de test"""
    
    print("🔍 Recherche de la bonne URL API Dolibarr")
    print("=" * 50)
    
    if API_KEY == "votre_cle_api_ici":
        print("❌ Veuillez configurer votre clé API dans le script")
        return
    
    print(f"🔑 Clé API: {'*' * (len(API_KEY) - 4) + API_KEY[-4:] if len(API_KEY) > 4 else '***'}")
    print()
    
    working_urls = []
    
    for base_url in CANDIDATE_URLS:
        print(f"🧪 Test de l'URL de base: {base_url}")
        print("-" * 40)
        
        success = await test_api_url(base_url, API_KEY)
        
        if success:
            working_urls.append(base_url)
            print(f"✅ URL fonctionnelle trouvée: {base_url}")
        else:
            print(f"❌ URL non fonctionnelle: {base_url}")
        
        print()
    
    print("=" * 50)
    print("📋 Résultats:")
    
    if working_urls:
        print(f"✅ {len(working_urls)} URL(s) fonctionnelle(s) trouvée(s):")
        for url in working_urls:
            print(f"   🔗 {url}")
        
        print()
        print("🔧 Configuration recommandée pour .env:")
        print(f"DOLIBARR_BASE_URL={working_urls[0]}")
        print(f"DOLIBARR_API_KEY={API_KEY}")
        
    else:
        print("❌ Aucune URL fonctionnelle trouvée")
        print()
        print("🔧 Vérifications à faire:")
        print("1. Module API REST activé dans Dolibarr?")
        print("2. Clé API correcte?")
        print("3. Permissions utilisateur suffisantes?")
        print("4. Firewall/sécurité qui bloque?")

if __name__ == "__main__":
    asyncio.run(main())
